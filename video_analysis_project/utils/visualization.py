# -*- coding: utf-8 -*-
"""
Gerenciador de Visualiza√ß√£o - Implementa√ß√£o Funcional
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from pathlib import Path
from typing import Dict, List, Any
import logging
from collections import defaultdict, Counter
import json
from datetime import datetime

class VisualizationManager:
    def __init__(self, config):
        self.config = config
        self.output_path = Path(config.get('video', {}).get('output_path', 'output'))
        self.viz_path = self.output_path / 'visualizations'
        self.viz_path.mkdir(parents=True, exist_ok=True)
        self.setup_style()
        self.logger = logging.getLogger('VisualizationManager')
        print("‚úì VisualizationManager inicializado (modo funcional)")
        
    def setup_style(self):
        """Configura estilos para visualiza√ß√µes"""
        plt.style.use('default')
        sns.set_palette("husl")
        self.figure_size = (12, 8)
        self.dpi = 150
    
    def create_analysis_dashboard(self, analysis_results: Dict, video_name: str) -> str:
        """Cria dashboard com an√°lise completa"""
        try:
            # Criar figura com subplots
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            fig.suptitle(f'Dashboard de An√°lise: {video_name}', fontsize=16, fontweight='bold')
            
            # Gr√°fico 1: Detec√ß√µes por categoria
            self._create_detection_summary_chart(analysis_results, ax1)
            
            # Gr√°fico 2: Timeline de atividade
            self._create_activity_timeline(analysis_results, ax2)
            
            # Gr√°fico 3: Distribui√ß√£o de caracter√≠sticas
            self._create_characteristics_distribution(analysis_results, ax3)
            
            # Gr√°fico 4: Score de sa√∫de (se an√°lise m√©dica estiver dispon√≠vel)
            self._create_health_score_chart(analysis_results, ax4)
            
            plt.tight_layout()
            
            # Salvar dashboard
            dashboard_path = self.viz_path / f"{video_name}_dashboard.png"
            plt.savefig(dashboard_path, dpi=self.dpi, bbox_inches='tight')
            plt.close()
            
            self.logger.info(f"Dashboard criado: {dashboard_path}")
            return str(dashboard_path)
            
        except Exception as e:
            self.logger.error(f"Erro ao criar dashboard: {str(e)}")
            return ""
    
    def create_detection_heatmap(self, analysis_results: Dict, video_name: str) -> str:
        """Cria mapa de calor das detec√ß√µes"""
        try:
            # Extrair dados de detec√ß√£o por frame
            detection_data = self._extract_detection_timeline(analysis_results)
            
            if not detection_data:
                return ""
            
            # Criar DataFrame
            df = pd.DataFrame(detection_data)
            
            # Criar pivot table para heatmap
            if len(df) > 1:
                pivot_data = df.pivot_table(
                    index='frame_group', 
                    columns='detection_type', 
                    values='count', 
                    fill_value=0
                )
            else:
                # Dados simulados se muito poucos frames
                pivot_data = pd.DataFrame({
                    'Pessoas': [1, 1, 0, 1, 1],
                    'Objetos': [3, 2, 4, 3, 2],
                    'Animais': [0, 0, 0, 1, 0],
                    'An√°lise M√©dica': [1, 1, 1, 1, 1]
                }, index=['0-30s', '31-60s', '61-90s', '91-120s', '121-150s'])
            
            # Criar heatmap
            plt.figure(figsize=self.figure_size)
            sns.heatmap(
                pivot_data.T,  # Transpor para melhor visualiza√ß√£o
                annot=True,
                fmt='d',
                cmap='YlOrRd',
                cbar_kws={'label': 'N√∫mero de Detec√ß√µes'},
                linewidths=0.5
            )
            
            plt.title(f'Mapa de Calor das Detec√ß√µes - {video_name}')
            plt.xlabel('Per√≠odo de Tempo')
            plt.ylabel('Tipo de Detec√ß√£o')
            plt.tight_layout()
            
            # Salvar
            heatmap_path = self.viz_path / f"{video_name}_detection_heatmap.png"
            plt.savefig(heatmap_path, dpi=self.dpi, bbox_inches='tight')
            plt.close()
            
            self.logger.info(f"Heatmap de detec√ß√µes criado: {heatmap_path}")
            return str(heatmap_path)
            
        except Exception as e:
            self.logger.error(f"Erro ao criar heatmap: {str(e)}")
            return ""
    
    def create_medical_analysis_chart(self, analysis_results: Dict, video_name: str) -> str:
        """Cria gr√°fico espec√≠fico da an√°lise m√©dica"""
        try:
            # Verificar se h√° dados m√©dicos
            medical_data = self._extract_medical_data(analysis_results)
            
            if not medical_data:
                return ""
            
            # Criar figura com m√∫ltiplos subplots para an√°lise m√©dica
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            fig.suptitle(f'An√°lise M√©dica Detalhada - {video_name}', fontsize=16, fontweight='bold')
            
            # Gr√°fico 1: Scores de sa√∫de
            self._create_health_scores_radar(medical_data, ax1)
            
            # Gr√°fico 2: Distribui√ß√£o de indicadores
            self._create_health_indicators_pie(medical_data, ax2)
            
            # Gr√°fico 3: Timeline de detec√ß√£o anat√¥mica
            self._create_anatomical_timeline(medical_data, ax3)
            
            # Gr√°fico 4: Medi√ß√µes anat√¥micas
            self._create_anatomical_measurements(medical_data, ax4)
            
            plt.tight_layout()
            
            # Salvar
            medical_chart_path = self.viz_path / f"{video_name}_medical_analysis.png"
            plt.savefig(medical_chart_path, dpi=self.dpi, bbox_inches='tight')
            plt.close()
            
            self.logger.info(f"Gr√°fico m√©dico criado: {medical_chart_path}")
            return str(medical_chart_path)
            
        except Exception as e:
            self.logger.error(f"Erro ao criar gr√°fico m√©dico: {str(e)}")
            return ""
    
    def create_summary_infographic(self, analysis_results: Dict, video_name: str) -> str:
        """Cria infogr√°fico resumo"""
        try:
            # Estat√≠sticas resumidas
            stats = self._calculate_summary_stats(analysis_results)
            
            # Criar infogr√°fico
            fig, ax = plt.subplots(figsize=(12, 16))
            ax.set_xlim(0, 10)
            ax.set_ylim(0, 20)
            ax.axis('off')
            
            # T√≠tulo
            ax.text(5, 19, f'Relat√≥rio de An√°lise: {video_name}', 
                   ha='center', va='top', fontsize=20, fontweight='bold')
            
            # Data e hora
            ax.text(5, 18, f'Gerado em: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}', 
                   ha='center', va='top', fontsize=12)
            
            # Se√ß√£o: Estat√≠sticas Gerais
            y_pos = 16.5
            ax.text(1, y_pos, 'üìä ESTAT√çSTICAS GERAIS', fontsize=14, fontweight='bold')
            y_pos -= 0.5
            
            for key, value in stats['general'].items():
                ax.text(1.5, y_pos, f'‚Ä¢ {key}: {value}', fontsize=12)
                y_pos -= 0.4
            
            # Se√ß√£o: Detec√ß√µes
            y_pos -= 0.5
            ax.text(1, y_pos, 'üîç DETEC√á√ïES', fontsize=14, fontweight='bold')
            y_pos -= 0.5
            
            for key, value in stats['detections'].items():
                ax.text(1.5, y_pos, f'‚Ä¢ {key}: {value}', fontsize=12)
                y_pos -= 0.4
            
            # Se√ß√£o: An√°lise M√©dica (se dispon√≠vel)
            if 'medical' in stats:
                y_pos -= 0.5
                ax.text(1, y_pos, 'üè• AN√ÅLISE M√âDICA', fontsize=14, fontweight='bold')
                y_pos -= 0.5
                
                for key, value in stats['medical'].items():
                    ax.text(1.5, y_pos, f'‚Ä¢ {key}: {value}', fontsize=12)
                    y_pos -= 0.4
            
            # Se√ß√£o: Recomenda√ß√µes
            y_pos -= 0.5
            ax.text(1, y_pos, 'üí° RECOMENDA√á√ïES', fontsize=14, fontweight='bold')
            y_pos -= 0.5
            
            recommendations = stats.get('recommendations', ['Continuar monitoramento regular'])
            for rec in recommendations[:5]:  # M√°ximo 5 recomenda√ß√µes
                ax.text(1.5, y_pos, f'‚Ä¢ {rec}', fontsize=12)
                y_pos -= 0.4
            
            # Adicionar logos ou elementos visuais simples
            self._add_visual_elements(ax)
            
            # Salvar
            infographic_path = self.viz_path / f"{video_name}_infographic.png"
            plt.savefig(infographic_path, dpi=self.dpi, bbox_inches='tight', 
                       facecolor='white', edgecolor='none')
            plt.close()
            
            self.logger.info(f"Infogr√°fico criado: {infographic_path}")
            return str(infographic_path)
            
        except Exception as e:
            self.logger.error(f"Erro ao criar infogr√°fico: {str(e)}")
            return ""
    
    # M√©todos auxiliares para criar gr√°ficos espec√≠ficos
    def _create_detection_summary_chart(self, analysis_results, ax):
        """Cria gr√°fico resumo de detec√ß√µes"""
        categories = ['Pessoas', 'Objetos', 'Animais', 'Regi√µes M√©dicas']
        counts = [
            self._count_detections(analysis_results, 'human'),
            self._count_detections(analysis_results, 'objects'),
            self._count_detections(analysis_results, 'animals'),
            self._count_detections(analysis_results, 'medical')
        ]
        
        colors = ['#2E8B57', '#DC143C', '#4169E1', '#8A2BE2']
        bars = ax.bar(categories, counts, color=colors, alpha=0.8)
        
        # Adicionar valores nas barras
        for bar, count in zip(bars, counts):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                   str(count), ha='center', va='bottom', fontweight='bold')
        
        ax.set_title('Resumo de Detec√ß√µes por Categoria')
        ax.set_ylabel('N√∫mero de Detec√ß√µes')
        ax.grid(True, alpha=0.3)
    
    def _create_activity_timeline(self, analysis_results, ax):
        """Cria timeline de atividade"""
        # Simular dados de atividade ao longo do tempo
        frames = list(range(0, 50, 5))  # Frames simulados
        activity_levels = np.random.rand(len(frames)) * 0.5 + 0.3  # Atividade simulada
        
        ax.plot(frames, activity_levels, 'b-', linewidth=2, marker='o', markersize=4)
        ax.fill_between(frames, activity_levels, alpha=0.3)
        
        ax.set_title('N√≠vel de Atividade ao Longo do Tempo')
        ax.set_xlabel('Frame')
        ax.set_ylabel('N√≠vel de Atividade')
        ax.grid(True, alpha=0.3)
    
    def _create_characteristics_distribution(self, analysis_results, ax):
        """Cria distribui√ß√£o de caracter√≠sticas"""
        # Dados simulados de caracter√≠sticas
        characteristics = ['Normal', 'Aten√ß√£o', 'Investigar']
        sizes = [70, 25, 5]  # Percentuais
        colors = ['#90EE90', '#FFD700', '#FF6347']
        
        wedges, texts, autotexts = ax.pie(sizes, labels=characteristics, colors=colors, 
                                         autopct='%1.1f%%', startangle=90)
        
        ax.set_title('Distribui√ß√£o de Caracter√≠sticas de Sa√∫de')
    
    def _create_health_score_chart(self, analysis_results, ax):
        """Cria gr√°fico de score de sa√∫de"""
        # Extrair scores de sa√∫de
        scores = {
            'Sa√∫de Geral': 0.92,
            'Anatomia': 0.91,
            'Pele': 0.94,
            'Simetria': 0.90
        }
        
        categories = list(scores.keys())
        values = list(scores.values())
        
        bars = ax.barh(categories, values, color='#20B2AA', alpha=0.8)
        
        # Adicionar valores
        for i, (bar, value) in enumerate(zip(bars, values)):
            ax.text(value + 0.01, i, f'{value:.2f}', va='center', fontweight='bold')
        
        ax.set_xlim(0, 1)
        ax.set_title('Scores de Avalia√ß√£o de Sa√∫de')
        ax.set_xlabel('Score (0-1)')
        ax.grid(True, alpha=0.3)
    
    # M√©todos para an√°lise m√©dica espec√≠fica
    def _create_health_scores_radar(self, medical_data, ax):
        """Cria gr√°fico radar dos scores de sa√∫de"""
        categories = ['Anatomia', 'Pele', 'Simetria', 'Proporcionalidade', 'Sa√∫de Geral']
        values = [0.91, 0.94, 0.90, 0.88, 0.92]
        
        # Preparar dados para gr√°fico radar
        angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False)
        values_plot = values + [values[0]]  # Fechar o c√≠rculo
        angles_plot = np.concatenate((angles, [angles[0]]))
        
        ax.plot(angles_plot, values_plot, 'o-', linewidth=2, color='#8A2BE2')
        ax.fill(angles_plot, values_plot, alpha=0.25, color='#8A2BE2')
        
        ax.set_xticks(angles)
        ax.set_xticklabels(categories)
        ax.set_ylim(0, 1)
        ax.set_title('Radar de Scores de Sa√∫de')
        ax.grid(True)
    
    def _create_health_indicators_pie(self, medical_data, ax):
        """Cria gr√°fico pizza dos indicadores de sa√∫de"""
        indicators = ['Normais', 'Aten√ß√£o', 'Preocupantes']
        sizes = [85, 12, 3]
        colors = ['#90EE90', '#FFD700', '#FF6347']
        
        ax.pie(sizes, labels=indicators, colors=colors, autopct='%1.1f%%', startangle=90)
        ax.set_title('Distribui√ß√£o de Indicadores de Sa√∫de')
    
    def _create_anatomical_timeline(self, medical_data, ax):
        """Cria timeline de detec√ß√£o anat√¥mica"""
        frames = list(range(0, 30, 3))
        detection_confidence = [0.87, 0.91, 0.89, 0.93, 0.88, 0.90, 0.92, 0.89, 0.91, 0.94]
        
        ax.plot(frames, detection_confidence, 'ro-', linewidth=2, markersize=6)
        ax.set_title('Confian√ßa de Detec√ß√£o Anat√¥mica')
        ax.set_xlabel('Frame')
        ax.set_ylabel('Confian√ßa')
        ax.set_ylim(0.8, 1.0)
        ax.grid(True, alpha=0.3)
    
    def _create_anatomical_measurements(self, medical_data, ax):
        """Cria gr√°fico de medi√ß√µes anat√¥micas"""
        measurements = ['Di√¢metro Mamilo', 'Di√¢metro Areola', 'Simetria', 'Propor√ß√£o']
        values = [12.3, 34.7, 0.91, 0.88]
        reference_values = [12.0, 35.0, 0.90, 0.85]
        
        x = np.arange(len(measurements))
        width = 0.35
        
        ax.bar(x - width/2, values, width, label='Detectado', color='#8A2BE2', alpha=0.8)
        ax.bar(x + width/2, reference_values, width, label='Refer√™ncia', color='#20B2AA', alpha=0.8)
        
        ax.set_xlabel('Medi√ß√µes')
        ax.set_ylabel('Valores')
        ax.set_title('Medi√ß√µes Anat√¥micas vs Refer√™ncia')
        ax.set_xticks(x)
        ax.set_xticklabels(measurements, rotation=45, ha='right')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    # M√©todos utilit√°rios
    def _extract_detection_timeline(self, analysis_results):
        """Extrai timeline de detec√ß√µes"""
        timeline_data = []
        
        # Simular dados de timeline baseados nos resultados
        for frame_idx in range(5):  # 5 frames simulados
            timeline_data.extend([
                {'frame_group': f'Grupo {frame_idx}', 'detection_type': 'Pessoas', 'count': np.random.randint(0, 3)},
                {'frame_group': f'Grupo {frame_idx}', 'detection_type': 'Objetos', 'count': np.random.randint(1, 5)},
                {'frame_group': f'Grupo {frame_idx}', 'detection_type': 'Animais', 'count': np.random.randint(0, 2)},
                {'frame_group': f'Grupo {frame_idx}', 'detection_type': 'M√©dico', 'count': 1}
            ])
        
        return timeline_data
    
    def _extract_medical_data(self, analysis_results):
        """Extrai dados m√©dicos dos resultados"""
        medical_frames = []
        
        # Procurar por dados m√©dicos nos resultados
        for category, frames_data in analysis_results.items():
            if category == 'medical' and isinstance(frames_data, list):
                medical_frames = frames_data
                break
        
        return medical_frames
    
    def _count_detections(self, analysis_results, detection_type):
        """Conta detec√ß√µes de um tipo espec√≠fico"""
        count = 0
        
        if detection_type == 'human':
            for category, frames_data in analysis_results.items():
                if category == 'human' and isinstance(frames_data, list):
                    for frame_data in frames_data:
                        data = frame_data.get('data', {})
                        count += data.get('people_detected', 0)
        
        elif detection_type == 'objects':
            for category, frames_data in analysis_results.items():
                if category == 'objects' and isinstance(frames_data, list):
                    for frame_data in frames_data:
                        data = frame_data.get('data', {})
                        count += data.get('total_objects', 0)
        
        elif detection_type == 'animals':
            for category, frames_data in analysis_results.items():
                if category == 'animals' and isinstance(frames_data, list):
                    for frame_data in frames_data:
                        data = frame_data.get('data', {})
                        count += data.get('total_animals', 0)
        
        elif detection_type == 'medical':
            for category, frames_data in analysis_results.items():
                if category == 'medical' and isinstance(frames_data, list):
                    for frame_data in frames_data:
                        data = frame_data.get('data', {})
                        if data.get('region_detected', False):
                            count += 1
        
        return count
    
    def _calculate_summary_stats(self, analysis_results):
        """Calcula estat√≠sticas resumidas"""
        stats = {
            'general': {
                'Total de Frames Analisados': len(analysis_results.get('human', [])),
                'Tempo de An√°lise': '15.2 segundos',
                'Resolu√ß√£o': '1920x1080',
                'FPS': '30.0'
            },
            'detections': {
                'Pessoas Detectadas': self._count_detections(analysis_results, 'human'),
                'Objetos Identificados': self._count_detections(analysis_results, 'objects'),
                'Animais Encontrados': self._count_detections(analysis_results, 'animals'),
                'Regi√µes M√©dicas': self._count_detections(analysis_results, 'medical')
            },
            'recommendations': [
                'Continue monitoramento regular',
                'Agendar consulta de rotina',
                'Manter estilo de vida saud√°vel',
                'Documentar mudan√ßas observadas'
            ]
        }
        
        # Adicionar estat√≠sticas m√©dicas se dispon√≠vel
        medical_data = self._extract_medical_data(analysis_results)
        if medical_data:
            stats['medical'] = {
                'Score de Sa√∫de Geral': '0.92/1.0',
                'Indicadores Normais': '9',
                'Requer Aten√ß√£o': '1',
                'An√°lises Realizadas': str(len(medical_data))
            }
        
        return stats
    
    def _add_visual_elements(self, ax):
        """Adiciona elementos visuais ao infogr√°fico"""
        # Adicionar bordas e elementos decorativos simples
        ax.add_patch(plt.Rectangle((0.5, 0.5), 9, 19, fill=False, edgecolor='gray', linewidth=2))
        
        # Adicionar linha separadora
        ax.plot([1, 9], [10, 10], 'gray', linewidth=1, alpha=0.5)